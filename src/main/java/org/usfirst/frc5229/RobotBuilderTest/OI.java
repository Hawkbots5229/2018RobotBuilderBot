// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.RobotBuilderTest;


import org.usfirst.frc5229.RobotBuilderTest.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.POVButton;
import edu.wpi.first.wpilibj.buttons.Trigger;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton3;
    public JoystickButton joystickButton4;
    public Joystick driveController;
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton5;
    public JoystickButton joystickButton6;
    public Joystick clawAndElevatorController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

        public POVButton povUp;
        public POVButton povDown;
        public POVButton povLeft;
        public POVButton povRight;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        clawAndElevatorController = new Joystick(1);
        
        joystickButton6 = new JoystickButton(clawAndElevatorController, 6);
        joystickButton6.whileHeld(new CloseClaws());
        joystickButton5 = new JoystickButton(clawAndElevatorController, 5);
        joystickButton5.whileHeld(new OpenClaws());
        joystickButton2 = new JoystickButton(clawAndElevatorController, 2);
        joystickButton2.whileHeld(new CloseClawWheels());
        joystickButton1 = new JoystickButton(clawAndElevatorController, 1);
        joystickButton1.whileHeld(new OpenClawWheels());
        driveController = new Joystick(0);
        
        joystickButton4 = new JoystickButton(driveController, 6);
        joystickButton4.whileHeld(new QuarterSpeedDriveCommand());
        joystickButton3 = new JoystickButton(driveController, 5);
        joystickButton3.whileHeld(new HalfSpeedDriveCommand());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Cmd", new AutonomousCmd());
        SmartDashboard.putData("Drivetrain Cmd", new DrivetrainCmd());
        SmartDashboard.putData("Raise Claw Elevator", new RaiseClawElevator());
        SmartDashboard.putData("Lower Claw Elevator", new LowerClawElevator());
        SmartDashboard.putData("Open Claws", new OpenClaws());
        SmartDashboard.putData("Close Claws", new CloseClaws());
        SmartDashboard.putData("Raise Climb Elevator", new RaiseClimbElevator());
        SmartDashboard.putData("Lower Climb Elevator", new LowerClimbElevator());
        SmartDashboard.putData("Stop Climb Elevator", new StopClimbElevator());
        SmartDashboard.putData("stopClawElevator", new stopClawElevator());
        SmartDashboard.putData("Elevator", new Elevator());
        SmartDashboard.putData("Claw Tilt Command", new ClawTiltCommand());
        SmartDashboard.putData("Open Claw Wheels", new OpenClawWheels());
        SmartDashboard.putData("Stop Claw Wheels", new StopClawWheels());
        SmartDashboard.putData("Close Claw Wheels", new CloseClawWheels());
        SmartDashboard.putData("Stop Claws", new StopClaws());
        SmartDashboard.putData("HalfSpeedDriveCommand", new HalfSpeedDriveCommand());
        SmartDashboard.putData("QuarterSpeedDriveCommand", new QuarterSpeedDriveCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        povUp = new POVButton(clawAndElevatorController, 0);
        povUp.whileHeld(new RaiseClimbElevator());
        povDown = new POVButton(clawAndElevatorController, 180);
        povDown.whileHeld(new LowerClimbElevator());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveController() {
        return driveController;
    }

    public Joystick getClawAndElevatorController() {
        return clawAndElevatorController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    
}

