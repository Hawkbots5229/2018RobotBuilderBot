// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5229.RobotBuilderTest.subsystems;


import org.usfirst.frc5229.RobotBuilderTest.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ClimbElevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private int timeoutMs = 10;
	private int pidIdx = 0;
	private int peakCurrent = 39;
	private int peakCurrentDur = 0;
    private int contCurrent = 37;
    private boolean raise = false;
    private boolean lower = false;
    
    public ClimbElevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX1 = new WPI_TalonSRX(4);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //Invert Motor
        talonSRX1.setInverted(false);
        talonSRX1.setSensorPhase(true);
            
        //Init Encoders
        talonSRX1.configSelectedFeedbackSensor(com.ctre.phoenix.motorcontrol.FeedbackDevice.CTRE_MagEncoder_Relative, 0, 0);

        // Set the peak and nominal outputs, 12V means full
        talonSRX1.configNominalOutputForward(0, timeoutMs); //(double percentOut, int timeoutMs)
        talonSRX1.configNominalOutputReverse(0, timeoutMs);
        talonSRX1.configPeakOutputForward(1, timeoutMs); //(double percentOut, int timeoutMs)
        talonSRX1.configPeakOutputReverse(-1, timeoutMs);

        // Current Limiting
        talonSRX1.configPeakCurrentLimit(peakCurrent, timeoutMs); /* 39 A */
        talonSRX1.configPeakCurrentDuration(peakCurrentDur, timeoutMs); /* 0ms */
        talonSRX1.configContinuousCurrentLimit(contCurrent, timeoutMs); /* 37A */
        talonSRX1.enableCurrentLimit(true); /* turn it on */

        // Init Sensor to zero
        talonSRX1.setSelectedSensorPosition(0, pidIdx, timeoutMs); //(int sensorPos, int pidIdx, int timeoutMs)

        // PID controls
        talonSRX1.selectProfileSlot(0, pidIdx); //(int slotIdx, int pidIdx) pidIdx should be 0
        talonSRX1.config_kF(0, 1.7 , timeoutMs); //(int slotIdx, double value, int timeoutMs)
        talonSRX1.config_kP(0, 0, timeoutMs);
        talonSRX1.config_kI(0, 0, timeoutMs);
        talonSRX1.config_kD(0, 0, timeoutMs);
        talonSRX1.config_IntegralZone(0, 0, timeoutMs);

    }

    public void raiseElevator(double speed, boolean button) {
        /*
        int pos = talonSRX1.getSelectedSensorPosition(0);
			if(pos < 71000) { //71000
				//_elevatorMotor.set(ControlMode.Velocity, speed);
				talonSRX1.set(1);
				if(button) {
					raise = true;
					lower = false;
				}
				else {
					raise = false;
					lower = false;
				}
			} else {
				talonSRX1.set(ControlMode.Velocity, 0);				
            }
            */
        talonSRX1.set(-1);
    }
    public void lowerElevator(double speed, boolean button) {
        /*
        int pos = talonSRX1.getSelectedSensorPosition(0);
			if(pos > 0) { //0
				//_elevatorMotor.set(ControlMode.Velocity, speed);
				talonSRX1.set(-1);
				if(button) {
					raise = false;
					lower = true;
				}
				else {
					raise = false;
					lower = false;
				}
			} else {
				talonSRX1.set(ControlMode.Velocity, 0);
				
            }
            */
            talonSRX1.set(1);
    }
    public void stopElevator() {
        talonSRX1.set(0);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new StopClimbElevator());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

